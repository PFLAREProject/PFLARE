ARG BASE_IMAGE=stevendargaville/petsc_kokkos

FROM ${BASE_IMAGE}
# Checkout the main branch by default
ARG BRANCH=main
# Use the optimised petsc build by default
ARG ARCH=arch-linux-c-opt
# Set the number of OpenMP threads to 1 by default
ARG OMP_NUM_THREADS=1

LABEL maintainer="Steven Dargaville"
LABEL description="PFLARE_kokkos"

ENV CHECKOUT_BRANCH=$BRANCH
ENV PETSC_ARCH=$ARCH
ENV OMP_NUM_THREADS=$OMP_NUM_THREADS
# This turns on checks between kokkos and cpu versions
ENV PFLARE_KOKKOS_DEBUG=1
# Ensure any test failures are caught and the build fails
# Also force any test that can to use the kokkos types
# Many tests will output a warning that some of these options are unused but that can be ignored
ENV PETSC_OPTIONS="-on_error_abort -mat_type aijkokkos -vec_type kokkos -dm_mat_type aijkokkos -dm_vec_type kokkos"

WORKDIR /build

# Clone PFLARE and run all the tests
# Add flags "-Wall -Werror -Wunused-result" as the petsc CI enforces capturing
# all return types, so this in combination with --with-strict-petscerrorcode in the petsc
# build will error out
RUN set -e; \
    echo "Cloning branch: ${CHECKOUT_BRANCH}" && \
    git clone --branch ${CHECKOUT_BRANCH} https://github.com/PFLAREProject/PFLARE.git && \
    cd PFLARE && \
    make -j2 FFLAGS="-Werror" CFLAGS="-Wall -Werror -Wunused-result" CXXFLAGS="-Wall -Werror -Wunused-result" CPPFLAGS="-Wall -Werror -Wunused-result" && \ 
    make -j2 check FFLAGS="-Werror" CFLAGS="-Wall -Werror -Wunused-result" CXXFLAGS="-Wall -Werror -Wunused-result" CPPFLAGS="-Wall -Werror -Wunused-result" && \
    make -j2 tests FFLAGS="-Werror" CFLAGS="-Wall -Werror -Wunused-result" CXXFLAGS="-Wall -Werror -Wunused-result" CPPFLAGS="-Wall -Werror -Wunused-result"

WORKDIR /build/PFLARE
