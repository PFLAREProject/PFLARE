name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:       

jobs:
  setup:
    runs-on: ubuntu-22.04
    outputs:
      branch: ${{ steps.determine_branch.outputs.branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine branch
        id: determine_branch
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          else
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: free disk space
        run: |
          docker system prune --volumes -af            

#   gnu_debug:
#     runs-on: ubuntu-22.04
#     needs: setup
#     env:
#       BRANCH: ${{ needs.setup.outputs.branch }}
#     steps:
#       - name: Build Docker image with debug PETSc
#         uses: docker/build-push-action@v2
#         with:
#           platforms: linux/amd64
#           push: false
#           file: ./dockerfiles/Dockerfile
#           build-args: |
#             BRANCH=${{ env.BRANCH }}
#             ARCH=arch-linux-c-debug

#   gnu_opt:
#     runs-on: ubuntu-22.04
#     needs: setup
#     env:
#       BRANCH: ${{ needs.setup.outputs.branch }}
#     steps:
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ vars.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}      
#       - name: Build Docker image for pull requests
#         uses: docker/build-push-action@v2
#         with:
#           platforms: linux/amd64
#           push: ${{ github.event_name != 'pull_request' }}
#           file: ./dockerfiles/Dockerfile
#           tags: stevendargaville/pflare:latest
#           build-args: |
#             BRANCH=${{ env.BRANCH }}
#             ARCH=arch-linux-c-opt

#   gnu_opt_64_bit:
#     runs-on: ubuntu-22.04
#     needs: setup
#     env:
#       BRANCH: ${{ needs.setup.outputs.branch }}
#     steps:
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ vars.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}        
#       - name: Build Docker image for pull requests with 64-bit PETSc
#         uses: docker/build-push-action@v2
#         with:
#           platforms: linux/amd64
#           push: ${{ github.event_name != 'pull_request' }}
#           file: ./dockerfiles/Dockerfile_64_bit
#           tags: stevendargaville/pflare_64_bit:latest
#           build-args: |
#             BRANCH=${{ env.BRANCH }}
#             ARCH=arch-linux-c-opt

#   gnu_opt_kokkos:
#     runs-on: ubuntu-22.04
#     needs: setup
#     env:
#       BRANCH: ${{ needs.setup.outputs.branch }}
#     steps:
#       - name: Build Docker image with KOKKOS and PETSc
#         uses: docker/build-push-action@v2
#         with:
#           platforms: linux/amd64
#           push: false
#           file: ./dockerfiles/Dockerfile_kokkos
#           build-args: |
#             BRANCH=${{ env.BRANCH }}
#             ARCH=arch-linux-c-opt      
            
#   gnu_opt_64_bit_kokkos:
#     runs-on: ubuntu-22.04
#     needs: setup
#     env:
#       BRANCH: ${{ needs.setup.outputs.branch }}
#     steps:
#       - name: Build Docker image with KOKKOS and 64-bit PETSc
#         uses: docker/build-push-action@v2
#         with:
#           platforms: linux/amd64
#           push: false
#           file: ./dockerfiles/Dockerfile_kokkos
#           build-args: |
#             BRANCH=${{ env.BRANCH }}
#             ARCH=arch-linux-c-opt-64bit           

#   nvidia_opt:
#     runs-on: ubuntu-22.04
#     needs: setup
#     env:
#       BRANCH: ${{ needs.setup.outputs.branch }}
#     steps:
#       - name: Build Docker image with PETSc and NVIDIA compilers
#         uses: docker/build-push-action@v2
#         with:
#           platforms: linux/amd64
#           push: false
#           file: ./dockerfiles/Dockerfile_nvidia
#           build-args: |
#             BRANCH=${{ env.BRANCH }}
#             ARCH=arch-linux-nvidia
            
#   intel_opt_no_test:
#     runs-on: ubuntu-22.04
#     needs: setup
#     env:
#       BRANCH: ${{ needs.setup.outputs.branch }}
#     steps:
#       - name: Build Docker image with PETSc and Intel
#         uses: docker/build-push-action@v2
#         with:
#           platforms: linux/amd64
#           push: false
#           file: ./dockerfiles/Dockerfile_intel
#           build-args: |
#             BRANCH=${{ env.BRANCH }}
#             ARCH=arch-linux-intel

#   # ~~~~~~~~~~~~~
#   # Build the gpu version of petsc
#   # ~~~~~~~~~~~~~
#   # Build the gpu on github free runners
#   build_petsc_opt_gpu:
#    runs-on: ubicloud-gpu
#    needs:  [setup]
#    # This conditional ensures the job only runs when manually triggered
#    if: github.event_name == 'workflow_dispatch'          
#    env:
#      BRANCH: ${{ needs.setup.outputs.branch }}
#    steps:
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ vars.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}        
#      # This won't actually run the tests, for the Dockerfile_cuda_kokkos
#      # image we need to run the tests in the next step
#      - name: Build Docker image with KOKKOS and PETSc with GPU
#        uses: docker/build-push-action@v2
#        with:
#          platforms: linux/amd64
#          # Always push this to dockerhub
#          push: true
#          file: ./dockerfiles/Dockerfile_cuda_kokkos_ci
#          # Tag this so we pick it up in the next step
#          tags: stevendargaville/petsc_cuda_kokkos_ci:latest
#          build-args: |
#            BRANCH=${{ env.BRANCH }}
#            ARCH=arch-linux-c-opt             

#   # ~~~~~~~~~~~~~
#   # Seperate the GPU builds into two steps - build and run
#   # ~~~~~~~~~~~~~
#   # Build the gpu on github free runners
#   build_gnu_opt_gpu:
#     runs-on: ubicloud-gpu
#     needs:  setup
#     # This conditional ensures the job only runs when manually triggered
#     if: github.event_name == 'workflow_dispatch'          
#     env:
#       BRANCH: ${{ needs.setup.outputs.branch }}
#     steps:
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ vars.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}        
#       # This won't actually run the tests, for the Dockerfile_cuda_kokkos
#       # image we need to run the tests in the next step
#       - name: Build Docker image with KOKKOS and PETSc with GPU
#         uses: docker/build-push-action@v2
#         with:
#           platforms: linux/amd64
#           # Always push this to dockerhub
#           push: true
#           file: ./dockerfiles/Dockerfile_cuda_kokkos
#           # Tag this so we pick it up in the next step
#           tags: stevendargaville/pflare_gpu:latest
#           build-args: |
#             BRANCH=${{ env.BRANCH }}
#             ARCH=arch-linux-c-opt      

  # Run the gpu tests on the gpu runner
  run_gnu_opt_gpu:
    runs-on: ubicloud-gpu
    # Only runs the gpu tests if the build succeeds
    needs:  setup
    # This conditional ensures the job only runs when manually triggered
    if: github.event_name == 'workflow_dispatch'    
    # Specify the protected environment to ensure gpu builds are only triggered 
    # by the correct people
    #environment: protected-manual-builds    
    env:
      BRANCH: ${{ needs.setup.outputs.branch }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}         
      # Currently our GPU CI only has a single GPU so we can't run the parallel tests
      # Check it sees the gpu by running nvidia-smi
      - name: Run Docker image with explicit --gpus flag
        run: |
         ls /usr/local/ &&
         set -e &&
         echo '=== GPU Information ===' &&
         nvidia-smi &&
         sudo apt-get update && sudo apt-get install -y nvidia-container-toolkit &&
         sudo apt-get update && sudo apt-get install -y --no-install-recommends \
         autoconf \
         automake \
         bash-completion \
         ca-certificates \
         chrpath \
         cmake \
         curl \
         g++ \
         gcc \
         gfortran \
         git \
         less \
         libblis-serial-dev \
         liblapack-dev \
         libtool \
         locales \
         m4 \
         make \
         openssl \
         pkg-config \
         ripgrep \
         zlib1g-dev \
         python3-virtualenv \
         python3-venv \
         python3-dev \
         wget \
         valgrind \
         vim &&
         mkdir build &&
         curl -O https://www.mpich.org/static/downloads/4.0.2/mpich-4.0.2.tar.gz && \
         tar xf mpich-4.0.2.tar.gz && \
         rm mpich-4.0.2.tar.gz && \
         cd mpich-4.0.2 && \
         ./configure \
               FFLAGS=-fallow-argument-mismatch \
               FCFLAGS=-fallow-argument-mismatch \
               --disable-wrapper-rpath \
               --with-device=ch3:nemesis \
               --enable-error-checking=runtime \
               --enable-error-messages=all \
               --enable-g=meminit && \
         make -j$(nproc) && \
         make install && \
         cd /build && \
         rm -rf /build/mpich-4.0.2 && \
         ldconfig &&      
         export HWLOC_HIDE_ERRORS=2 && export PETSC_DIR=/build/petsc && export PETSC_ARCH=arch-linux-c-opt &&
         git clone --depth=1 --branch=$PETSC_GIT_BRANCH https://gitlab.com/petsc/petsc.git && \
         cd petsc && \
         python3 configure \
            --with-debugging=1 \
            --download-metis \
            --download-parmetis \
            --download-fblaslapack \
            --with-cuda \
            --download-kokkos \
            --download-kokkos-kernels \
            --with-cuda-arch=86 \
            && \
         make &&
         git clone -b CI_GPU_enable https://github.com/PFLAREProject/PFLARE.git &&
         cd PFLARE && ls && cd dockerfiles && ls &&
         export PETSC_OPTIONS="-on_error_abort -mat_type aijkokkos -vec_type kokkos -dm_mat_type aijkokkos -dm_vec_type kokkos -use_gpu_aware_mpi 0" &&
         make && make build_tests && make tests_serial
         "